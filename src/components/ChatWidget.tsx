'use client';

import { useState, useEffect } from 'react';
import { useLanguage } from '@/contexts/LanguageContext';

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

interface InternalProcess {
  id: string;
  description: string;
  status: 'pending' | 'processing' | 'completed';
  timestamp: Date;
}

interface ChatWidgetProps {
  businessType: 'beauty' | 'restaurant' | 'delivery' | 'barbershop' | 'autorepair' | 'courses';
  isDemo?: boolean;
  onProcessUpdate?: (processes: InternalProcess[]) => void;
}

export default function ChatWidget({ businessType, isDemo = false, onProcessUpdate }: ChatWidgetProps) {
  const { language, t } = useLanguage();
  const [messages, setMessages] = useState<Message[]>([
    {
      role: 'assistant',
      content: t(`chat.welcome.${businessType}`)
    }
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [internalProcesses, setInternalProcesses] = useState<InternalProcess[]>([]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ –∏–ª–∏ —è–∑—ã–∫–∞
  useEffect(() => {
    setMessages([
      {
        role: 'assistant',
        content: t(`chat.welcome.${businessType}`)
      }
    ]);
    setInternalProcesses([]);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [businessType, language]);

  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
  useEffect(() => {
    if (onProcessUpdate) {
      onProcessUpdate(internalProcesses);
    }
  }, [internalProcesses, onProcessUpdate]);

  const simulateInternalProcesses = (userMessage: string) => {
    const processTemplates = getProcessTemplates(businessType, userMessage);
    const newProcesses: InternalProcess[] = [];

    processTemplates.forEach((template, index) => {
      const process: InternalProcess = {
        id: `${Date.now()}-${index}`,
        description: template.description,
        status: 'pending',
        timestamp: new Date()
      };
      newProcesses.push(process);
    });

    setInternalProcesses(prev => [...prev, ...newProcesses]);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    newProcesses.forEach((process, index) => {
      setTimeout(() => {
        setInternalProcesses(prev => 
          prev.map(p => 
            p.id === process.id 
              ? { ...p, status: 'processing' }
              : p
          )
        );
      }, (index + 1) * 500);

      setTimeout(() => {
        setInternalProcesses(prev => 
          prev.map(p => 
            p.id === process.id 
              ? { ...p, status: 'completed' }
              : p
          )
        );
      }, (index + 1) * 1000 + Math.random() * 1000);
    });
  };

  const addSuccessMessage = (botResponse: string) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏/–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (isBookingConfirmation(botResponse, businessType)) {
      setTimeout(() => {
        const finalProcess: InternalProcess = {
          id: `${Date.now()}-final`,
          description: getFinalMessage(businessType),
          status: 'completed',
          timestamp: new Date()
        };
        setInternalProcesses(prev => [...prev, finalProcess]);
      }, 1000);
    }
  };

  const sendMessage = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage = { role: 'user' as const, content: input };
    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInput('');
    setIsLoading(true);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    simulateInternalProcesses(userMessage.content);

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: newMessages,
          businessType,
          language
        }),
      });

      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }

      setMessages([...newMessages, { role: 'assistant', content: data.message }]);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
      addSuccessMessage(data.message);
    } catch (error) {
      console.error('Chat error:', error);
      setMessages([...newMessages, { 
        role: 'assistant', 
        content: t('chat.error') || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' 
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <div className="bg-white rounded-2xl shadow-xl p-6 max-w-md w-full">
      {/* Header */}
      <div className="flex items-center mb-4">
        <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
        <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
        <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
        <span className="ml-2 text-sm text-gray-500">
          {isDemo ? 'AI ChatBot Demo' : t(`chat.title.${businessType}`)}
        </span>
      </div>
      
      {/* Messages */}
      <div className="h-80 overflow-y-auto bg-gray-50 rounded-lg p-4 mb-4 space-y-4 text-black">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`flex items-start ${
              message.role === 'user' ? 'justify-end' : ''
            }`}
          >
            {message.role === 'assistant' && (
              <div className="bg-indigo-600 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3 flex-shrink-0">
                <i className="fas fa-robot text-sm"></i>
              </div>
            )}
            <div
              className={`rounded-lg p-3 max-w-xs ${
                message.role === 'user'
                  ? 'bg-indigo-600 text-white'
                  : 'bg-white shadow-sm'
              }`}
            >
              <p className="text-sm whitespace-pre-wrap">{message.content}</p>
            </div>
          </div>
        ))}
        
        {isLoading && (
          <div className="flex items-start">
            <div className="bg-indigo-600 text-white rounded-full w-8 h-8 flex items-center justify-center mr-3">
              <i className="fas fa-robot text-sm"></i>
            </div>
            <div className="bg-white rounded-lg p-3 shadow-sm">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* Input */}
      <div className="flex text-black">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder={t('chat.placeholder')}
          disabled={isLoading}
          className="flex-1 border border-gray-300 rounded-l-lg px-4 py-2 focus:outline-none focus:border-indigo-600 disabled:opacity-50"
        />
        <button
          onClick={sendMessage}
          disabled={isLoading || !input.trim()}
          className="bg-indigo-600 text-white px-4 py-2 rounded-r-lg hover:bg-indigo-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <i className="fas fa-paper-plane"></i>
        </button>
      </div>
    </div>
  );
}



function getProcessTemplates(businessType: string, userMessage: string): { description: string }[] {
  const lowerMessage = userMessage.toLowerCase();
  
  const processMap = {
    beauty: [
      { description: 'üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞' },
      { description: 'üìä –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ CRM –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞—Ö' },
      { description: '‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏' },
      { description: 'üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ —É—Å–ª—É–≥–∏' },
      { description: 'üìÖ –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏' },
      { description: '‚úÖ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞' }
    ],
    barbershop: [
      { description: 'üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É—Å–ª—É–≥–∏ –±–∞—Ä–±–µ—Ä—à–æ–ø–∞' },
      { description: 'üë®‚Äçüíº –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ä–±–µ—Ä–æ–≤' },
      { description: '‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏' },
      { description: '‚úÇÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö —Å—Ç—Ä–∏–∂–µ–∫' },
      { description: 'üíµ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥' },
      { description: 'üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø–∏—Å–∏' }
    ],
    restaurant: [
      { description: 'üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' },
      { description: 'üè™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞' },
      { description: 'ü™ë –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤' },
      { description: 'üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é' },
      { description: 'üéâ –£—á–µ—Ç –æ—Å–æ–±—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π (–±–∞–Ω–∫–µ—Ç, –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è)' },
      { description: 'üìû –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é' }
    ],
    delivery: [
      { description: 'üçï –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É' },
      { description: 'üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–ª—é–¥ –≤ –º–µ–Ω—é' },
      { description: 'üè† –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∞–¥—Ä–µ—Å—É' },
      { description: 'üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã' },
      { description: 'üõµ –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞' },
      { description: 'üì± –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞' }
    ],
    autorepair: [
      { description: 'üîß –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º' },
      { description: 'üöó –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞' },
      { description: 'üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ' },
      { description: 'üë®‚Äçüîß –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞' },
      { description: 'üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç –∏ –∑–∞–ø—á–∞—Å—Ç–µ–π' },
      { description: 'üìÖ –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏' }
    ],
    courses: [
      { description: 'üìö –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞' },
      { description: 'üéØ –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞' },
      { description: 'üë©‚Äçüè´ –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è' },
      { description: 'üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø' },
      { description: 'üí≥ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—É—Ä—Å–∞' },
      { description: '‚úÖ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–±—É—á–µ–Ω–∏—é' }
    ]
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const baseProcesses = [...(processMap[businessType as keyof typeof processMap] || processMap.beauty)];
  const processes = [...baseProcesses];
  
  if (lowerMessage.includes('—Ü–µ–Ω–∞') || lowerMessage.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || lowerMessage.includes('—Å–∫–æ–ª—å–∫–æ')) {
    processes.push({ description: 'üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–∫–∏–¥–æ–∫ –∏ –∞–∫—Ü–∏–π' });
  }
  
  if (lowerMessage.includes('—Å—Ä–æ—á–Ω–æ') || lowerMessage.includes('–±—ã—Å—Ç—Ä–æ')) {
    processes.push({ description: '‚ö° –ü–æ–∏—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤' });
  }

  return processes.slice(0, 4); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
}

function getFinalMessage(businessType: string): string {
  const messages = {
    beauty: 'üéâ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!',
    barbershop: 'üéâ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞—Ä–±–µ—Ä—à–æ–ø!',
    restaurant: 'üéâ –°—Ç–æ–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ!',
    delivery: 'üéâ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –∫—É—Ö–Ω—é!',
    autorepair: 'üéâ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è!',
    courses: 'üéâ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!'
  };
  
  return messages[businessType as keyof typeof messages] || messages.beauty;
}

function isBookingConfirmation(botResponse: string, businessType: string): boolean {
  const lowerResponse = botResponse.toLowerCase();
  
  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  const confirmationKeywords = [
    '–∑–∞–ø–∏—Å–∞–ª', '–∑–∞–ø–∏—Å–∞–ª–∞', '–∑–∞–ø–∏—Å–∞–Ω', '–∑–∞–ø–∏—Å–∞–Ω–∞', '–∑–∞–ø–∏—Å–∞–Ω—ã', '–∑–∞–ø–∏—Å—ã–≤–∞—é',
    '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∞', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞', 
    '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
    '–∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç', '–∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω', '–∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    '–≤–∞—à–∞ –∑–∞–ø–∏—Å—å', '–≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–≤–∞—à –∑–∞–∫–∞–∑',
    '—É—Å–ø–µ—à–Ω–æ', '–≥–æ—Ç–æ–≤–æ', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–æ', '–ø—Ä–∏–Ω—è—Ç–æ',
    '–∑–∞–ø–∏—Å—å:', '–∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–µ—Ç—Å—è', '–∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞'
  ];
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
  const businessSpecificKeywords = {
    beauty: ['–Ω–∞ –º–∞–Ω–∏–∫—é—Ä', '–Ω–∞ –ø–µ–¥–∏–∫—é—Ä', '–Ω–∞ —Å—Ç—Ä–∏–∂–∫—É', '–∫ –º–∞—Å—Ç–µ—Ä—É', '–≤ —Å–∞–ª–æ–Ω', '–º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞', '–∂–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞'],
    barbershop: ['–∫ –±–∞—Ä–±–µ—Ä—É', '–Ω–∞ —Å—Ç—Ä–∏–∂–∫—É', '–Ω–∞ –±–æ—Ä–æ–¥—É', '–≤ –±–∞—Ä–±–µ—Ä—à–æ–ø', '–º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞'],
    restaurant: ['—Å—Ç–æ–ª–∏–∫', '—Å—Ç–æ–ª', '–º–µ—Å—Ç–æ', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω'],
    delivery: ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–∫—É—Ä—å–µ—Ä', '–∑–∞–∫–∞–∑', '–ø—Ä–∏–≤–µ–∑–µ–º', '–¥–æ—Å—Ç–∞–≤–∏–º'],
    autorepair: ['–Ω–∞ —Ä–µ–º–æ–Ω—Ç', '–≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', '–∫ –º–∞—Å—Ç–µ—Ä—É', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–º–∞—à–∏–Ω–∞', '—Ä–µ–º–æ–Ω—Ç'],
    courses: ['–Ω–∞ –∫—É—Ä—Å—ã', '–Ω–∞ –∑–∞–Ω—è—Ç–∏—è', '–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π', '–æ–±—É—á–µ–Ω–∏–µ', '—É—Ä–æ–∫']
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const hasConfirmation = confirmationKeywords.some(keyword => 
    lowerResponse.includes(keyword)
  );
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  const businessKeywords = businessSpecificKeywords[businessType as keyof typeof businessSpecificKeywords] || [];
  const hasBusinessContext = businessKeywords.some(keyword => 
    lowerResponse.includes(keyword)
  );
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–∏/–¥–∞—Ç—ã (–ø—Ä–∏–∑–Ω–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
  const hasTimeReference = /\b\d{1,2}:\d{2}\b|\b\d{1,2}\s*(—á–∞—Å|—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\b/i.test(lowerResponse);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ò (–∫–æ–Ω—Ç–µ–∫—Å—Ç –±–∏–∑–Ω–µ—Å–∞ –ò–õ–ò –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞)
  return hasConfirmation && (hasBusinessContext || hasTimeReference);
}
