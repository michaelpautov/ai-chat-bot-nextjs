import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { name, phone, telegram, businessType, message } = await request.json();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !businessType) {
      return NextResponse.json(
        { error: '–ò–º—è –∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏
    if (!phone && !telegram) {
      return NextResponse.json(
        { error: '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram –¥–ª—è —Å–≤—è–∑–∏' },
        { status: 400 }
      );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    const telegramSent = await sendTelegramNotification({
      name,
      phone,
      telegram,
      businessType,
      message
    });

    if (!telegramSent) {
      console.error('Failed to send Telegram notification');
    }

    return NextResponse.json({ 
      success: true,
      message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    });

  } catch (error) {
    console.error('Trial request error:', error);
    return NextResponse.json(
      { error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏' },
      { status: 500 }
    );
  }
}

async function sendTelegramNotification(data: {
  name: string;
  phone?: string;
  telegram?: string;
  businessType: string;
  message?: string;
}) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  if (!botToken || !chatId) {
    console.error('Telegram credentials not configured');
    return false;
  }

  const businessTypeNames = {
    beauty: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã',
    barbershop: '–ë–∞—Ä–±–µ—Ä—à–æ–ø',
    restaurant: '–†–µ—Å—Ç–æ—Ä–∞–Ω',
    delivery: '–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã',
    other: '–î—Ä—É–≥–æ–π'
  };

  const businessTypeName = businessTypeNames[data.businessType as keyof typeof businessTypeNames] || data.businessType;

  let messageText = `üéØ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!</b>\n\n`;
  messageText += `üë§ <b>–ò–º—è:</b> ${data.name}\n`;
  messageText += `üè¢ <b>–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞:</b> ${businessTypeName}\n`;
  
  if (data.phone) {
    messageText += `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}\n`;
  }
  
  if (data.telegram) {
    messageText += `üí¨ <b>Telegram:</b> ${data.telegram}\n`;
  }
  
  if (data.message) {
    messageText += `üí≠ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${data.message}\n`;
  }
  
  messageText += `\n‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}`;

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: messageText,
        parse_mode: 'HTML'
      }),
    });

    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`);
    }

    return true;
  } catch (error) {
    console.error('Telegram notification error:', error);
    return false;
  }
}
