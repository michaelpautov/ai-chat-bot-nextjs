import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞
const SYSTEM_PROMPTS = {
  beauty: `–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã "–ö—Ä–∞—Å–æ—Ç–∞". –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏.

–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:
- –°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è (1500‚ÇΩ) - –º–∞—Å—Ç–µ—Ä–∞: –ú–∞—Ä–∏–Ω–∞, –ê–Ω–Ω–∞
- –°—Ç—Ä–∏–∂–∫–∞ –º—É–∂—Å–∫–∞—è (1000‚ÇΩ) - –º–∞—Å—Ç–µ—Ä–∞: –ú–∞—Ä–∏–Ω–∞, –ê–Ω–Ω–∞  
- –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ (3000‚ÇΩ) - –º–∞—Å—Ç–µ—Ä–∞: –ú–∞—Ä–∏–Ω–∞, –ê–Ω–Ω–∞
- –ú–∞–Ω–∏–∫—é—Ä (800‚ÇΩ) - –º–∞—Å—Ç–µ—Ä: –ï–ª–µ–Ω–∞
- –ü–µ–¥–∏–∫—é—Ä (1200‚ÇΩ) - –º–∞—Å—Ç–µ—Ä: –ï–ª–µ–Ω–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞:
- –ú–∞—Ä–∏–Ω–∞: 10:00, 12:00, 14:00, 16:00
- –ê–Ω–Ω–∞: 11:00, 13:00, 15:00, 17:00
- –ï–ª–µ–Ω–∞: 10:00, 12:00, 14:00, 16:00

–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
1. –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –∫–ª–∏–µ–Ω—Ç–∞
2. –£–∑–Ω–∞–π, –∫–∞–∫–∞—è —É—Å–ª—É–≥–∞ –Ω—É–∂–Ω–∞
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã —É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
4. –ó–∞–ø—Ä–æ—Å–∏ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏
5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–ø–∏—Å—å —Å –¥–µ—Ç–∞–ª—è–º–∏

–ì–æ–≤–æ—Ä–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–∞ "—Ç—ã". –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ CRM —Å–∏—Å—Ç–µ–º—ã.`,

  restaurant: `–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ "–í–∫—É—Å". –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ—á—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫.

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ 19:00:
- –°—Ç–æ–ª–∏–∫ ‚Ññ5 (—É –æ–∫–Ω–∞) - 4 –º–µ—Å—Ç–∞
- –°—Ç–æ–ª–∏–∫ ‚Ññ12 (VIP –∑–æ–Ω–∞) - 6 –º–µ—Å—Ç  
- –°—Ç–æ–ª–∏–∫ ‚Ññ8 (–æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª) - 4 –º–µ—Å—Ç–∞
- –°—Ç–æ–ª–∏–∫ ‚Ññ15 (—Ç–µ—Ä—Ä–∞—Å–∞) - 2 –º–µ—Å—Ç–∞

–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
1. –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –≥–æ—Å—Ç—è
2. –£–∑–Ω–∞–π –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–æ–ª–∏–∫–∏
4. –ó–∞–ø—Ä–æ—Å–∏ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –±—Ä–æ–Ω–∏
5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏

–ì–æ–≤–æ—Ä–∏ –≤–µ–∂–ª–∏–≤–æ, –Ω–∞ "–≤—ã". –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ CRM —Å–∏—Å—Ç–µ–º—ã.`,

  delivery: `–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ "–ë—ã—Å—Ç—Ä–∞—è –ï–¥–∞". –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É.

–ú–µ–Ω—é:
üçï –ü–∏—Ü—Ü—ã:
- –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ - 590‚ÇΩ
- –ü–µ–ø–ø–µ—Ä–æ–Ω–∏ - 690‚ÇΩ  
- 4 —Å—ã—Ä–∞ - 790‚ÇΩ
- –ú—è—Å–Ω–∞—è - 890‚ÇΩ

ü•§ –ù–∞–ø–∏—Ç–∫–∏:
- –ö–æ–ª–∞ 0.5–ª - 120‚ÇΩ
- –°–ø—Ä–∞–π—Ç 0.5–ª - 120‚ÇΩ
- –°–æ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π - 150‚ÇΩ

üçü –ó–∞–∫—É—Å–∫–∏:
- –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏ - 190‚ÇΩ
- –ö—É—Ä–∏–Ω—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏ - 350‚ÇΩ

–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
1. –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –∫–ª–∏–µ–Ω—Ç–∞
2. –ü–æ–∫–∞–∂–∏ –º–µ–Ω—é –∏ —É–∑–Ω–∞–π, —á—Ç–æ —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É
4. –ü–æ—Å—á–∏—Ç–∞–π –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
5. –ó–∞–ø—Ä–æ—Å–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
6. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏ (35-40 –º–∏–Ω)

–ì–æ–≤–æ—Ä–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–∞ "—Ç—ã". –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ CRM —Å–∏—Å—Ç–µ–º—ã.`,

  barbershop: `–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ "–°—Ç–∏–ª—å". –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∫ –±–∞—Ä–±–µ—Ä—É.

–£—Å–ª—É–≥–∏:
‚úÇÔ∏è –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 1500‚ÇΩ
üßî –°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã - 800‚ÇΩ  
üíà –ö–æ–º–ø–ª–µ–∫—Å (—Å—Ç—Ä–∏–∂–∫–∞ + –±–æ—Ä–æ–¥–∞) - 2000‚ÇΩ
üß¥ –£–∫–ª–∞–¥–∫–∞ - 500‚ÇΩ

–ë–∞—Ä–±–µ—Ä—ã –∏ —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞:
- –ê–Ω–¥—Ä–µ–π: 11:00, 13:00, 15:00, 17:00
- –°–µ—Ä–≥–µ–π: 10:00, 12:00, 14:00, 16:00

–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
1. –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –∫–ª–∏–µ–Ω—Ç–∞
2. –£–∑–Ω–∞–π, –∫–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –Ω—É–∂–Ω—ã
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã —É –±–∞—Ä–±–µ—Ä–æ–≤
4. –ó–∞–ø—Ä–æ—Å–∏ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–ø–∏—Å—å —Å –¥–µ—Ç–∞–ª—è–º–∏

–ì–æ–≤–æ—Ä–∏ –ø–æ-–º—É–∂—Å–∫–∏, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–∞ "—Ç—ã". –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ CRM —Å–∏—Å—Ç–µ–º—ã.`
};

export async function POST(request: NextRequest) {
  try {
    const { messages, businessType = 'beauty', stream = false } = await request.json();

    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { error: 'OpenAI API key not configured' },
        { status: 500 }
      );
    }

    const systemPrompt = SYSTEM_PROMPTS[businessType as keyof typeof SYSTEM_PROMPTS] || SYSTEM_PROMPTS.beauty;

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω streaming
    if (stream) {
      const completion = await openai.chat.completions.create({
        messages: [
          { role: 'system', content: systemPrompt },
          ...messages
        ],
        model: 'gpt-4o-mini',
        temperature: 0.7,
        max_tokens: 500,
        stream: true,
      });

      const encoder = new TextEncoder();
      const readable = new ReadableStream({
        async start(controller) {
          try {
            for await (const chunk of completion) {
              const content = chunk.choices[0]?.delta?.content || '';
              if (content) {
                controller.enqueue(encoder.encode(`data: ${JSON.stringify({ content })}\n\n`));
              }
            }
            controller.enqueue(encoder.encode('data: [DONE]\n\n'));
            controller.close();
          } catch (error) {
            controller.error(error);
          }
        },
      });

      return new Response(readable, {
        headers: {
          'Content-Type': 'text/event-stream',
          'Cache-Control': 'no-cache',
          'Connection': 'keep-alive',
        },
      });
    }

    // –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ streaming
    const completion = await openai.chat.completions.create({
      messages: [
        { role: 'system', content: systemPrompt },
        ...messages
      ],
      model: 'gpt-4o-mini',
      temperature: 0.7,
      max_tokens: 500,
    });

    const response = completion.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.';

    return NextResponse.json({ 
      message: response,
      _request_id: completion._request_id // –î–æ–±–∞–≤–ª—è–µ–º request ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    });

  } catch (error) {
    console.error('OpenAI API error:', error);
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if (error instanceof OpenAI.APIError) {
      console.log('Request ID:', error.requestID);
      console.log('Status:', error.status);
      console.log('Error name:', error.name);
      
      return NextResponse.json(
        { 
          error: 'AI service error',
          details: error.message,
          status: error.status 
        },
        { status: error.status || 500 }
      );
    }

    return NextResponse.json(
      { error: 'Failed to get response from AI' },
      { status: 500 }
    );
  }
}
